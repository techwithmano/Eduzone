
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // ---- HELPER FUNCTIONS ---- //
    
    function isAuth() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isRole(userId, role) {
      return isAuth() && getUserData(userId).role == role;
    }

    function isRequestingUserAdmin() {
      return isRole(request.auth.uid, 'ADMIN');
    }

    // For checking single document GET requests
    function isClassroomMember(classroomId) {
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      // Check for null to prevent errors on non-existent docs
      if (classroomData == null) { return false; }
      
      let isCreator = request.auth.uid == classroomData.creatorId;
      // Defensively check if array fields exist before checking membership
      let isTeacher = 'teacherIds' in classroomData && request.auth.uid in classroomData.teacherIds;
      let isStudent = 'enrolledStudentIds' in classroomData && request.auth.uid in classroomData.enrolledStudentIds;
      
      return isCreator || isTeacher || isStudent;
    }

    // For checking write permissions within a classroom
    function isClassroomAdminOrTeacher(classroomId) {
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      if (classroomData == null) { return false; }

      let isCreator = request.auth.uid == classroomData.creatorId;
      let isTeacher = 'teacherIds' in classroomData && request.auth.uid in classroomData.teacherIds;
      
      return isCreator || isTeacher;
    }

    // ---- COLLECTION RULES ---- //

    // User Profiles
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if request.auth.uid == userId;
      // Admins can update any user profile (for classroom deletion cleanup)
      allow update: if request.auth.uid == userId || isRequestingUserAdmin();
      allow delete: if false; // Users are never deleted
    }

    // Classrooms
    match /classrooms/{classroomId} {
      // GET: Strict check for membership for single document reads
      allow get: if isAuth() && isClassroomMember(classroomId);
      // LIST: Allow authenticated users to query. The client-side queries *must* be correct.
      // This is safe because all dashboard queries are constrained by user ID.
      allow list: if isAuth();
      
      // WRITE: Admins can create/update/delete their own classrooms.
      allow create: if isRequestingUserAdmin() && request.resource.data.creatorId == request.auth.uid;
      allow update: if isRequestingUserAdmin() && resource.data.creatorId == request.auth.uid;
      allow delete: if isRequestingUserAdmin() && resource.data.creatorId == request.auth.uid;

      // Classroom Subcollections (Announcements, Assignments, etc.)
      match /{subcollection}/{docId} {
        allow read: if isAuth() && isClassroomMember(classroomId);
        allow write: if isAuth() && isClassroomAdminOrTeacher(classroomId);

        // Submissions (nested even deeper)
        match /submissions/{studentId} {
          // Admin/Teacher can read any submission. Student can only read their own.
          allow read: if (isAuth() && isClassroomAdminOrTeacher(classroomId)) || (isAuth() && request.auth.uid == studentId);
          // Student can create their own submission, but not overwrite an existing one.
          allow create: if isAuth() && request.auth.uid == studentId;
          // Admin/Teacher can update (grade).
          allow update: if isAuth() && isClassroomAdminOrTeacher(classroomId);
          // Admin/Teacher can delete (needed for assignment/quiz cleanup).
          allow delete: if isAuth() && isClassroomAdminOrTeacher(classroomId);
        }
      }
    }
    
    // Publicly accessible store products
    match /products/{productId} {
      allow read: if true;
      allow write: if isRequestingUserAdmin();
    }
    
    // Contact form submissions
    match /contacts/{contactId} {
      allow read: if false;
      allow create: if true;
      allow write: if false;
    }
  }
}
