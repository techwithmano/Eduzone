rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isTeacher(userId) {
      // Check if the user's role is 'TEACHER'.
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'TEACHER';
    }
    
    function isClassroomTeacher(classroomId) {
      // Check if the requesting user is the creator of the classroom.
      return request.auth.uid == get(/databases/$(database)/documents/classrooms/$(classroomId)).data.creatorId;
    }
    
    function isEnrolled(classroomId) {
      // Check if the requesting user is in the classroom's list of enrolled students.
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return 'enrolledStudentIds' in classroom && request.auth.uid in classroom.enrolledStudentIds;
    }

    match /users/{userId} {
      // A user can read their own profile.
      allow get: if request.auth.uid == userId;

      // A teacher can query the users collection ONLY to find a student by email.
      allow list: if isTeacher(request.auth.uid)
                   && request.query.limit <= 1
                   && request.query.where[0][0] == 'email';

      // A user can create their own profile upon sign-up.
      allow create: if request.auth.uid == userId;

      // A user can update their own profile, but cannot change their role.
      // A teacher can update a student's `enrolledClassroomIds` to enroll/unenroll them,
      // but cannot change any other field.
      allow update: if (request.auth.uid == userId && request.resource.data.role == resource.data.role)
                   || (isTeacher(request.auth.uid)
                       // Check that ONLY enrolledClassroomIds is being changed.
                       && request.resource.data.diff(resource.data).affectedKeys()
                           .hasOnly(['enrolledClassroomIds']));
    }
    
    match /classrooms/{classroomId} {
      // A user can read a classroom doc if they are the teacher or enrolled.
      allow get: if isClassroomTeacher(classroomId) || isEnrolled(classroomId);

      // Teachers can list classrooms they created. Students can list classrooms they are in.
      allow list: if (request.auth.uid != null && isTeacher(request.auth.uid) && request.query.where[0][0] == 'creatorId' && request.query.where[0][2] == request.auth.uid)
                   || (request.auth.uid != null && request.query.where[0][0] == 'enrolledStudentIds' && request.query.where[0][1] == 'array-contains' && request.query.where[0][2] == request.auth.uid);
      
      // Teachers can create, update, and delete classrooms they own.
      allow create: if isTeacher(request.auth.uid) && request.resource.data.creatorId == request.auth.uid;
      allow update, delete: if isClassroomTeacher(classroomId);
      
      match /announcements/{announcementId} {
        allow get, list: if isClassroomTeacher(classroomId) || isEnrolled(classroomId);
        allow write: if isClassroomTeacher(classroomId);
      }
      
      match /assignments/{assignmentId} {
        allow get, list: if isClassroomTeacher(classroomId) || isEnrolled(classroomId);
        allow write: if isClassroomTeacher(classroomId);
        
        match /submissions/{studentId} {
          allow get: if request.auth.uid == studentId || isClassroomTeacher(classroomId);
          allow list: if isClassroomTeacher(classroomId);
          allow create, update: if request.auth.uid == studentId;
        }
      }
    }
    
    match /products/{productId} {
      allow get, list: if true;
    }

    match /contacts/{contactId} {
      allow create: if true;
    }
  }
}
