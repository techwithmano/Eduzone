
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    function isAdmin() {
        return isAuth() && getUserData(request.auth.uid).role == 'ADMIN';
    }

    function isClassroomCreator(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return isAuth() && request.auth.uid == classroom.creatorId;
    }

    function isClassroomTeacher(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      // Defensively check for key existence before accessing
      return isAuth() && 'teacherIds' in classroom && request.auth.uid in classroom.teacherIds;
    }
    
    function isEnrolledStudent(classroomId) {
        let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
        // Defensively check for key existence before accessing
        return isAuth() && 'enrolledStudentIds' in classroom && request.auth.uid in classroom.enrolledStudentIds;
    }
    
    function isClassroomMember(classroomId) {
        return isClassroomCreator(classroomId) || isClassroomTeacher(classroomId) || isEnrolledStudent(classroomId);
    }
    
    // COLLECTIONS
    
    // User Profiles
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isUser(userId);
      // User can update their own profile, or an Admin can update anyone's profile.
      allow update: if isUser(userId) || isAdmin();
      allow delete: if false; 
    }

    // Products for the store
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }
    
    // Contact form submissions
    match /contacts/{contactId} {
      allow read, update, delete: if false;
      allow create: if true;
    }

    // Classrooms and all nested content
    match /classrooms/{classroomId} {
      // Rules for reading a single document
      allow get: if isClassroomMember(classroomId);
      
      // Rules for querying a list of documents. Must be broad to allow client-side queries.
      // The queries themselves filter the data securely.
      allow list: if isAuth();

      allow create: if isAdmin();
      allow update, delete: if isClassroomCreator(classroomId);

      // Announcements, Assignments, Materials, Quizzes
      match /{subCollection}/{docId}
        where subCollection in ['announcements', 'assignments', 'materials', 'quizzes'] {
        
        allow read: if isClassroomMember(classroomId);
        allow create, update, delete: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId);
      }
      
      // Assignment Submissions
      match /assignments/{assignmentId}/submissions/{studentId} {
        allow get: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId) || isUser(studentId);
        allow list: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId);
        allow create: if isUser(studentId) && !exists(/databases/$(database)/documents/classrooms/$(classroomId)/assignments/$(assignmentId)/submissions/$(studentId));
        allow update: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId); // For grading
        allow delete: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId);
      }
      
      // Quiz Submissions
      match /quizzes/{quizId}/submissions/{studentId} {
        allow get: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId) || isUser(studentId);
        allow list: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId);
        allow create: if isUser(studentId) && !exists(/databases/$(database)/documents/classrooms/$(classroomId)/quizzes/$(quizId)/submissions/$(studentId));
        allow update: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId); // For grading
        allow delete: if isClassroomCreator(classroomId) || isClassroomTeacher(classroomId);
      }
    }
  }
}
