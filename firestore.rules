
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isSignedIn() {
      return request.auth != null;
    }
    
    // Check if the requesting user has the 'TEACHER' role
    function isRequestingUserTeacher() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'TEACHER';
    }
    
    // Check if the requesting user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Check if the teacher owns the specific classroom
    function isClassroomOwner(classroomId) {
      return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.creatorId == request.auth.uid;
    }
    
    // Check if the user is a member of the classroom (either student or teacher owner)
    function isClassroomMember(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return request.auth.uid == classroom.creatorId || request.auth.uid in classroom.enrolledStudentIds;
    }

    // =================================
    // Collection Rules
    // =================================

    // User Profiles
    match /users/{userId} {
      allow get: if isSignedIn();
      allow list: if isRequestingUserTeacher(); // Only teachers can search for users (to enroll them)
      
      // A user can create their own document during signup.
      allow create: if request.auth.uid == userId;

      // Users can update their own documents.
      // Teachers can ONLY update the `enrolledClassroomIds` of other users.
      allow update: if isOwner(userId) || 
                      (isRequestingUserTeacher() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['enrolledClassroomIds']));
                      
      allow delete: if false; // Users can't delete their own accounts
    }
    
    // Classrooms
    match /classrooms/{classroomId} {
      allow get: if isSignedIn() && isClassroomMember(classroomId);
      allow list: if isSignedIn(); // Broad list for dashboards, will be filtered on the client.
      
      // Only a teacher can create a classroom, and they must be the creator.
      allow create: if isRequestingUserTeacher() && request.resource.data.creatorId == request.auth.uid;
      
      // Only the teacher who owns the classroom can update or delete it.
      allow update, delete: if isRequestingUserTeacher() && isClassroomOwner(classroomId);

      // --- Subcollections ---
      match /announcements/{announcementId} {
        allow read: if isClassroomMember(classroomId);
        allow create, delete: if isClassroomOwner(classroomId) && isRequestingUserTeacher();
      }
      
      match /assignments/{assignmentId} {
        allow read: if isClassroomMember(classroomId);
        allow create, delete: if isClassroomOwner(classroomId) && isRequestingUserTeacher();

        match /submissions/{submissionId} {
            // A student can read/write their OWN submission. `submissionId` IS the student's UID.
            // The teacher of the classroom can read any submission.
            allow read: if (isOwner(submissionId) || (isClassroomOwner(classroomId) && isRequestingUserTeacher()));
            allow create, update: if isOwner(submissionId);
            allow delete: if false;
        }
      }
    }
    
    // Products (Read-only for users)
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if false;
    }

    // Contact Form (Write-only for users)
    match /contacts/{contactId} {
      allow create: if true;
      allow read, update, delete: if false;
    }
  }
}
