
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isClassroomCreator(classroomId) {
      return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.creatorId == request.auth.uid;
    }

    function isClassroomTeacher(classroomId) {
        let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
        let isCreator = classroomDoc.data.creatorId == request.auth.uid;
        let isTeacher = request.auth.uid in classroomDoc.data.teacherIds;
        return isCreator || isTeacher;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.auth.uid == userId;
      // Allow user to update their own profile, or an admin to update any profile
      allow update: if isAuth() && (request.auth.uid == userId || isRole('ADMIN'));
      allow delete: if isAuth() && isRole('ADMIN');
    }
    
    // Contact Submissions Collection
    match /contacts/{contactId} {
      allow create: if true; // Open for anyone to send a message
      allow read, write, delete: if isAuth() && isRole('ADMIN');
    }

    // Products Collection
    match /products/{productId} {
        allow read: if true; // Everyone can see products
        allow create, update, delete: if isAuth() && isRole('ADMIN');
    }

    // Classrooms Collection
    match /classrooms/{classroomId} {
      allow read: if isAuth() && (
        request.auth.uid in resource.data.enrolledStudentIds ||
        request.auth.uid in resource.data.teacherIds ||
        resource.data.creatorId == request.auth.uid
      );
      
      allow list: if isAuth(); // Allows fetching lists, client-side filters by user role.
      
      allow create: if isAuth() && isRole('ADMIN');
      
      allow update: if isAuth() && (isClassroomCreator(classroomId) || isRole('ADMIN'));
      
      allow delete: if isAuth() && (isClassroomCreator(classroomId) || isRole('ADMIN'));

      // Announcements Subcollection
      match /announcements/{announcementId} {
        allow read: if isAuth();
        allow create, delete: if isAuth() && isClassroomTeacher(classroomId);
      }
      
      // Materials Subcollection
      match /materials/{materialId} {
        allow read: if isAuth();
        allow create, delete: if isAuth() && isClassroomTeacher(classroomId);
      }

      // Assignments Subcollection
      match /assignments/{assignmentId} {
        allow read: if isAuth();
        allow create, delete: if isAuth() && isClassroomTeacher(classroomId);
        
        // Submissions for an Assignment
        match /submissions/{submissionId} {
          allow read: if isAuth() && (isClassroomTeacher(classroomId) || request.auth.uid == submissionId);
          // Student can create, Teacher/Admin can update (grade)
          allow create, update: if isAuth() && (isClassroomTeacher(classroomId) || request.auth.uid == submissionId);
          allow delete: if isAuth() && isClassroomTeacher(classroomId);
        }
      }
      
       // Quizzes Subcollection
      match /quizzes/{quizId} {
        allow read: if isAuth();
        allow create, delete: if isAuth() && isClassroomTeacher(classroomId);
        
        // Submissions for a Quiz
        match /submissions/{submissionId} {
          allow read: if isAuth() && (isClassroomTeacher(classroomId) || request.auth.uid == submissionId);
          allow create: if isAuth() && request.auth.uid == submissionId;
          // Teacher/Admin can update (grade)
          allow update: if isAuth() && isClassroomTeacher(classroomId); 
          allow delete: if isAuth() && isClassroomTeacher(classroomId);
        }
      }
    }
  }
}
