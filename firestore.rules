rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isStudent() {
      return isAuth() && isRole('STUDENT');
    }

    function isTeacher() {
      return isAuth() && isRole('TEACHER');
    }

    function isAdmin() {
      return isAuth() && isRole('ADMIN');
    }
    
    function isClassroomCreator(classroomId) {
      return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.creatorId == request.auth.uid;
    }

    function isAssignedTeacher(classroomId) {
      // Use .get() to safely access teacherIds which might not exist.
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return request.auth.uid in classroomData.get('teacherIds', []);
    }

    function isEnrolledStudent(classroomId) {
      return request.auth.uid in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.enrolledStudentIds;
    }

    // User Profiles
    match /users/{userId} {
      allow read: if isAuth();
      // Allow user to create their own profile, and update it.
      allow write: if isAuth() && request.auth.uid == userId;
    }

    // Contact form submissions
    match /contacts/{contactId} {
      allow create: if true;
    }
    
    // Products in the store
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Classrooms & All Subcollections
    match /classrooms/{classroomId} {
      // READ: Users can read a classroom doc if they created it, are a teacher in it, or are a student in it.
      // This single rule allows for the dashboard list queries to work correctly.
      allow read: if isAuth() && (
        resource.data.creatorId == request.auth.uid ||
        request.auth.uid in resource.data.get('teacherIds', []) ||
        request.auth.uid in resource.data.enrolledStudentIds
      );

      // WRITE: Only admins who are also the creator can update/delete the main classroom document.
      // Admins can enroll/unenroll users by updating the ID arrays.
      allow update: if isAdmin(); 
      
      // WRITE: Only admins can create classrooms.
      allow create: if isAdmin();
      allow delete: if isAdmin() && resource.data.creatorId == request.auth.uid;

      // SUBCOLLECTION: Announcements
      match /announcements/{announcementId} {
        allow read: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId) || isEnrolledStudent(classroomId));
        allow create: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId));
        allow delete: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId));
      }

      // SUBCOLLECTION: Assignments
      match /assignments/{assignmentId} {
        allow read: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId) || isEnrolledStudent(classroomId));
        allow create, delete: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId));

        // SUB-SUBCOLLECTION: Assignment Submissions
        match /submissions/{submissionId} {
          allow read: if isAuth() && (
            submissionId == request.auth.uid || // Student who submitted
            isClassroomCreator(classroomId) ||   // Admin who created class
            isAssignedTeacher(classroomId)       // Assigned Teacher
          );
          
          allow create: if isAuth() && submissionId == request.auth.uid;

          // Student can resubmit (update), teacher/admin can grade (update)
          allow update: if isAuth() && (
            submissionId == request.auth.uid ||
            isClassroomCreator(classroomId) ||
            isAssignedTeacher(classroomId)
          );
          
          allow delete: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId));
        }
      }
      
      // SUBCOLLECTION: Quizzes
      match /quizzes/{quizId} {
        allow read: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId) || isEnrolledStudent(classroomId));
        allow create, delete: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId));
        
        // SUB-SUBCOLLECTION: Quiz Submissions
        match /submissions/{submissionId} {
           allow read: if isAuth() && (
            submissionId == request.auth.uid || // Student who submitted
            isClassroomCreator(classroomId) ||   // Admin who created class
            isAssignedTeacher(classroomId)       // Assigned Teacher
          );
          
           // Only students can create a submission for themselves.
          allow create: if isAuth() && submissionId == request.auth.uid;

          // Teachers/Admins can update to grade it. Students can't re-submit.
          allow update: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId));
          
          allow delete: if isAuth() && submissionId == request.auth.uid;
        }
      }

      // SUBCOLLECTION: Materials
      match /materials/{materialId} {
        allow read: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId) || isEnrolledStudent(classroomId));
        allow create, delete: if isAuth() && (isClassroomCreator(classroomId) || isAssignedTeacher(classroomId));
      }
    }
  }
}
