
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAuth() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isTeacher() {
      // Check role exists and is 'TEACHER'
      let userData = getUserData(request.auth.uid);
      return isAuth() && 'role' in userData && userData.role == 'TEACHER';
    }
    
    function isStudent() {
      // Check role exists and is 'STUDENT'
      let userData = getUserData(request.auth.uid);
      return isAuth() && 'role' in userData && userData.role == 'STUDENT';
    }
    
    function isClassroomCreator(classroomId) {
      // Check creatorId exists and matches the authenticated user
      let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
      return isTeacher() &&
             'data' in classroomDoc && // ensure doc exists
             'creatorId' in classroomDoc.data && 
             classroomDoc.data.creatorId == request.auth.uid;
    }

    function isEnrolled(classroomId) {
      let userData = getUserData(request.auth.uid);
      // Check enrolledClassroomIds exists, is a list, and contains the classroomId
      return isStudent() &&
             'enrolledClassroomIds' in userData &&
             userData.enrolledClassroomIds is list &&
             classroomId in userData.enrolledClassroomIds;
    }
    
    // =================================
    // Collections
    // =================================
    match /users/{userId} {
      allow get: if isAuth() && request.auth.uid == userId;
      allow create: if isAuth() && request.auth.uid == userId && !exists(/databases/$(database)/documents/users/$(userId));
      allow list: if isTeacher(); // For enrolling students by email
      allow update: if (isTeacher() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['enrolledClassroomIds']))
                    || (isAuth() && request.auth.uid == userId);
    }
    
    match /classrooms/{classroomId} {
      allow create: if isTeacher() && request.resource.data.creatorId == request.auth.uid;
      allow read, update, delete: if isClassroomCreator(classroomId);
      allow get: if isEnrolled(classroomId);
      allow list: if isAuth(); // Queries are filtered client-side

      match /announcements/{announcementId} {
        allow read: if isClassroomCreator(classroomId) || isEnrolled(classroomId);
        allow create, delete: if isClassroomCreator(classroomId);
      }

      match /assignments/{assignmentId} {
        allow read: if isClassroomCreator(classroomId) || isEnrolled(classroomId);
        allow create, delete: if isClassroomCreator(classroomId);

        match /submissions/{submissionId} {
          allow get, write: if isEnrolled(classroomId) && submissionId == request.auth.uid;
          allow list, get: if isClassroomCreator(classroomId);
        }
      }
      
      match /materials/{materialId} {
        allow read: if isClassroomCreator(classroomId) || isEnrolled(classroomId);
        allow create, delete: if isClassroomCreator(classroomId);
      }
      
      match /quizzes/{quizId} {
        allow read: if isClassroomCreator(classroomId) || isEnrolled(classroomId);
        allow create, delete: if isClassroomCreator(classroomId);
        
        match /submissions/{submissionId} {
          allow read, write: if isEnrolled(classroomId) && submissionId == request.auth.uid;
          allow list, get: if isClassroomCreator(classroomId);
        }
      }
    }

    match /contacts/{contactId} {
      allow create: if true;
    }
    
    match /products/{productId} {
        allow read, list: if true;
    }
  }
}
