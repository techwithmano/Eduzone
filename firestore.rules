rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---

    function isAuth() {
      return request.auth != null;
    }

    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }

    function hasRole(role) {
      return isAuth() && getUserData().role == role;
    }
    
    function isAdmin() {
      return hasRole('ADMIN');
    }

    function isEnrolled(classroomId) {
      return isAuth() && getUserData().enrolledClassroomIds.hasAny([classroomId]);
    }

    function isTeacherForClassroom(classroomId) {
        let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
        return isAuth() && 
            (request.auth.uid == classroom.creatorId || (classroom.teacherIds != null && classroom.teacherIds.hasAny([request.auth.uid])));
    }
    
    // --- Collection Rules ---

    match /users/{userId} {
      allow write: if isAdmin() || (isAuth() && request.auth.uid == userId);
      allow get: if isAuth() && (request.auth.uid == userId || isAdmin());
      allow list: if isAdmin();
    }
    
    match /products/{productId} {
        allow read: if true;
        allow create, update, delete: if isAdmin();
    }
    
    match /contacts/{contactId} {
        allow create: if true;
        allow read, write, delete: if isAdmin();
    }

    match /classrooms/{classroomId} {
        allow create, delete, update: if isAdmin();
        allow get: if isAuth() && (isAdmin() || isTeacherForClassroom(classroomId) || isEnrolled(classroomId));
        allow list: if isAuth();

        // --- Sub-collection Rules ---

        match /announcements/{announcementId} {
            allow read: if isEnrolled(classroomId) || isTeacherForClassroom(classroomId) || isAdmin();
            allow create, delete: if isTeacherForClassroom(classroomId) || isAdmin();
        }
        
        match /materials/{materialId} {
            allow read: if isEnrolled(classroomId) || isTeacherForClassroom(classroomId) || isAdmin();
            allow create, delete: if isTeacherForClassroom(classroomId) || isAdmin();
        }

        match /assignments/{assignmentId} {
            allow read: if isEnrolled(classroomId) || isTeacherForClassroom(classroomId) || isAdmin();
            allow create, delete: if isTeacherForClassroom(classroomId) || isAdmin();

            match /submissions/{submissionId} {
                allow read: if isTeacherForClassroom(classroomId) || isAdmin() || (isAuth() && request.auth.uid == submissionId);
                allow write: if isAuth() && request.auth.uid == submissionId && isEnrolled(classroomId);
            }
        }
        
        match /quizzes/{quizId} {
            allow read: if isEnrolled(classroomId) || isTeacherForClassroom(classroomId) || isAdmin();
            allow create, delete: if isTeacherForClassroom(classroomId) || isAdmin();
            
            match /submissions/{submissionId} {
                allow read: if isTeacherForClassroom(classroomId) || isAdmin() || (isAuth() && request.auth.uid == submissionId);
                allow create: if isAuth() && request.auth.uid == submissionId && isEnrolled(classroomId);
                allow update, delete: if false;
            }
        }
    }
  }
}