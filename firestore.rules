
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions to keep rules DRY
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isStudent(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'STUDENT';
    }

    function isTeacher(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'TEACHER';
    }

    function isClassroomCreator(classroomId, userId) {
      return get(/databases/$(database)/documents/classrooms/$(classroomId)).data.creatorId == userId;
    }
    
    function isEnrolled(classroomId, userId) {
      return userId in get(/databases/$(database)/documents/classrooms/$(classroomId)).data.enrolledStudentIds;
    }

    // USER PROFILES
    // Users can read their own profile.
    // Teachers can query the user list to find students by email.
    // Teachers can update a student's enrolledClassroomIds.
    // No one can delete user profiles through the client.
    match /users/{userId} {
      allow read: if isSignedIn() && (
        request.auth.uid == userId || isTeacher(request.auth.uid)
      );
      allow list: if isSignedIn() && isTeacher(request.auth.uid);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && (
        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL'])) ||
        (isTeacher(request.auth.uid) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['enrolledClassroomIds']))
      );
      allow delete: if false;
    }

    // CLASSROOMS
    // Teachers can create classrooms.
    // Only the creator teacher can update or delete their classroom.
    // Enrolled students and the creator can read classroom details.
    match /classrooms/{classroomId} {
      allow read: if isSignedIn() && (isClassroomCreator(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));
      allow list: if isSignedIn(); // Students list their enrolled classes, teachers list their created classes.
      allow create: if isSignedIn() && isTeacher(request.auth.uid) && request.resource.data.creatorId == request.auth.uid;
      allow update: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);
      allow delete: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);

      // ANNOUNCEMENTS
      // Teachers of the class can create/delete.
      // Enrolled students and the teacher can read.
      match /announcements/{announcementId} {
        allow read, list: if isSignedIn() && (isClassroomCreator(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));
        allow create: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);
        allow delete: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);
      }

      // ASSIGNMENTS
      // Teachers can create/delete. Students/teachers can read.
      match /assignments/{assignmentId} {
        allow read, list: if isSignedIn() && (isClassroomCreator(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));
        allow create: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);
        allow delete: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);

        // SUBMISSIONS
        // Students can create/update their own submissions. Teachers can read all.
        match /submissions/{submissionId} {
          allow read, list: if isSignedIn() && isClassroomCreator(classroomId, request.auth.uid);
          allow create, update: if isSignedIn() && isStudent(request.auth.uid) && submissionId == request.auth.uid;
          allow delete: if false;
        }
      }
      
      // MATERIALS
      // Teachers can create/delete. Enrolled students and the teacher can read.
      match /materials/{materialId} {
        allow read, list: if isSignedIn() && (isClassroomCreator(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));
        allow create: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);
        allow delete: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);
      }

      // QUIZZES
      // Teachers can create/delete. Enrolled students and the teacher can read.
      match /quizzes/{quizId} {
        allow read, list: if isSignedIn() && (isClassroomCreator(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));
        allow create: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);
        allow delete: if isSignedIn() && isTeacher(request.auth.uid) && isClassroomCreator(classroomId, request.auth.uid);

        // QUIZ SUBMISSIONS
        // Students can create/update their own submissions. Teachers can read all.
        match /submissions/{submissionId} {
          allow read, list: if isSignedIn() && (isClassroomCreator(classroomId, request.auth.uid) || isEnrolled(classroomId, request.auth.uid));
          allow create, update: if isSignedIn() && isStudent(request.auth.uid) && submissionId == request.auth.uid;
          allow delete: if false;
        }
      }
    }
    
    // PRODUCTS
    // Anyone can read products.
    match /products/{productId} {
        allow read, list: if true;
        allow create, update, delete: if false; // Managed via backend/console
    }

    // CONTACTS
    // Anyone can create (submit the form). No one can read/update/delete from client.
    match /contacts/{contactId} {
        allow create: if true;
        allow read, update, delete: if false;
    }
  }
}
