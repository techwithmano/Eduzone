rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isRoleForUser(userId, role) {
        return isAuth() && get(/databases/$(database)/documents/users/$(userId)).data.role == role;
    }

    function isClassroomAdmin(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return isAuth() && request.auth.uid == classroom.creatorId;
    }
    
    function isClassroomTeacher(classroomId) {
      let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      return isAuth() && request.auth.uid in classroom.teacherIds;
    }

    function isEnrolledStudent(classroomId) {
        let classroom = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
        return isAuth() && request.auth.uid in classroom.enrolledStudentIds;
    }
    
    function canAccessClassroom(classroomId) {
        return isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId) || isEnrolledStudent(classroomId);
    }
    
    // USERS
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.auth.uid == userId;
      // Admins can update any user, users can update their own profile
      allow update: if isAuth() && (isRole('ADMIN') || request.auth.uid == userId);
      allow delete: if isRole('ADMIN');
    }

    // CONTACTS
    match /contacts/{contactId} {
        allow create: if true; // Anyone can send a message
        allow read, update, delete: if isRole('ADMIN');
    }
    
    // PRODUCTS
    match /products/{productId} {
        allow read: if true; // Anyone can browse products
        allow create, update, delete: if isRole('ADMIN');
    }

    // CLASSROOMS
    match /classrooms/{classroomId} {
      allow read: if isAuth() && canAccessClassroom(classroomId);
      allow create: if isRole('ADMIN');
      allow update: if isAuth() && (isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId));
      allow delete: if isClassroomAdmin(classroomId);

      // Announcements
      match /announcements/{announcementId} {
        allow read: if canAccessClassroom(classroomId);
        allow create, update: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
        allow delete: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
      }
      
      // Materials
      match /materials/{materialId} {
        allow read: if canAccessClassroom(classroomId);
        allow create, update: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
        allow delete: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
      }
      
      // Assignments
      match /assignments/{assignmentId} {
        allow read: if canAccessClassroom(classroomId);
        allow create, update: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
        allow delete: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);

        // Submissions
        match /submissions/{submissionId} {
          allow read: if canAccessClassroom(classroomId);
          allow create: if isAuth() && request.auth.uid == submissionId && isEnrolledStudent(classroomId);
          allow update: if (isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId)) || (isAuth() && request.auth.uid == submissionId);
          allow delete: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
        }
      }
      
      // Quizzes
      match /quizzes/{quizId} {
        allow read: if canAccessClassroom(classroomId);
        allow create, update, delete: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
        
        match /submissions/{submissionId} {
            allow read: if canAccessClassroom(classroomId);
            allow create: if isAuth() && request.auth.uid == submissionId && isEnrolledStudent(classroomId);
            allow update: if (isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId));
            allow delete: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
        }
      }
    }
  }
}