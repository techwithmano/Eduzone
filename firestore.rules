
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =================================
    // Helper Functions
    // =================================
    function isAuth() {
      return request.auth != null;
    }

    function isRole(role) {
      // Use exists() to prevent errors if user doc isn't created yet.
      return isAuth() && exists(/databases/$(database)/documents/users/$(request.auth.uid)) && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    function isAdmin() {
      return isRole('ADMIN');
    }

    function isTeacher() {
      return isRole('TEACHER');
    }

    // Checks if the requesting user is the creator of the classroom
    function isClassroomAdmin(classroomId) {
      let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
      return isAuth() && classroomDoc.data.creatorId == request.auth.uid;
    }

    // Checks if the requesting user is an assigned teacher for the classroom
    function isClassroomTeacher(classroomId) {
      let classroomDoc = get(/databases/$(database)/documents/classrooms/$(classroomId));
      return isAuth() && 'teacherIds' in classroomDoc.data && request.auth.uid in classroomDoc.data.teacherIds;
    }

    // Checks if the requesting user is a valid member (Admin, Teacher, or Student)
    function isClassroomMember(classroomId) {
      // Check for document existence first to prevent read-before-write errors
      if (!exists(/databases/$(database)/documents/classrooms/$(classroomId))) {
        return false;
      }
      let classroomData = get(/databases/$(database)/documents/classrooms/$(classroomId)).data;
      
      // Defensively check for role existence and array membership
      let isCreator = request.auth.uid == classroomData.creatorId;
      let isTeacher = 'teacherIds' in classroomData && request.auth.uid in classroomData.teacherIds;
      let isStudent = 'enrolledStudentIds' in classroomData && request.auth.uid in classroomData.enrolledStudentIds;
      
      return isAuth() && (isCreator || isTeacher || isStudent);
    }

    // =================================
    // Collection Rules
    // =================================

    // USER PROFILES
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.auth.uid == userId;
      allow update: if (isAuth() && request.auth.uid == userId) || isAdmin();
      allow delete: if isAdmin();
    }

    // CLASSROOMS
    match /classrooms/{classroomId} {
      allow get: if isClassroomMember(classroomId);
      allow list: if isAuth();
      
      allow create: if isAdmin();
      allow update: if isClassroomAdmin(classroomId);
      allow delete: if isClassroomAdmin(classroomId);

      // CLASSROOM SUB-COLLECTIONS (Announcements, Assignments, etc.)
      match /{subCollection}/{docId} {
        allow read: if isClassroomMember(classroomId);
        allow create, update: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
        // Let Admins or Teachers delete the content they create
        allow delete: if (isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId)) && (
            resource.data.authorId == request.auth.uid || 
            isClassroomAdmin(classroomId)
          );
      }
      
      // ASSIGNMENT SUBMISSIONS
      match /assignments/{assignmentId}/submissions/{studentId} {
        allow get: if isClassroomMember(classroomId);
        allow create: if isAuth() && request.auth.uid == studentId && !exists(path(request.path));
        allow update: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
        allow delete: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
      }

      // QUIZ SUBMISSIONS
      match /quizzes/{quizId}/submissions/{studentId} {
         allow get: if isClassroomMember(classroomId);
         allow create: if isAuth() && request.auth.uid == studentId && !exists(path(request.path));
         allow update: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
         allow delete: if isClassroomAdmin(classroomId) || isClassroomTeacher(classroomId);
      }
    }
    
    // STORE PRODUCTS
    match /products/{productId} {
      allow read;
      allow create, update, delete: if isAdmin();
    }
    
    // CONTACT FORM SUBMISSIONS
    match /contacts/{contactId} {
        allow create;
        allow read, update, delete: if false; // Only allow reading from server/console
    }
  }
}
